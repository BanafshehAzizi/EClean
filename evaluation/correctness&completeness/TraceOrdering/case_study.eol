var modelroot = Package.all.select(c|c.type.name = "Model");
modelroot.rootElement();
var allClasses : Set = modelroot.getAllOwnedClasses();
var allRegion : Set = modelroot.getAllStateMachines().getAllRegions();
allRegion.println();
allRegion.size().println();
allRegion.getAllStates().println();
allRegion.getAllStates().size().println();
allRegion.getAllTransitions().println();
allRegion.getAllTransitions().size().println();
for (s in modelroot.getAllStateMachines()) {
	s.println();
	s.getMainRegion().println();
	s.getIntialState().println();
}
"test for owned class".println();
var allClass : Set = modelroot.getAllOwnedClasses();
allClasses.println();
allClasses.first().getPrimitiveAttributes().println();
operation UMLRTModel rootElement() : UMLRTModel!Package {
	return Package.all.select(c|c.type.name = "Model").first;
}
operation UMLRTModel!Transition events() : Set {
	var allEvents : Set = Set{};
	for (trig in self.trigger) {
		for (e in trig.event) {
			if (e.name <> "*") {
				allEvents.add(Sequence{e.owner.name, e.`operation`.name});
			}
			else {
				allEvents.add(Sequence{e.owner.name, "*"});
			}
		}
	}
	return allEvents;
}
operation UMLRTModel!State exit() : String {
	if (self.exit.isDefined()) {
		self.exit.body.first();
	}
	else {
		return "None";
	}
}
operation UMLRTModel!State entry() : String {
	if (self.entry.isDefined()) {
		self.entry.body.first();
	}
	else {
		return "None";
	}
}
operation UMLRTModel!Pseudostate entry() : String {
	return "None";
}
operation UMLRTModel!Pseudostate exit() : String {
	return "None";
}
operation UMLRTModel!Transition action() : String {
	if (self.effect.isDefined()) {
		return self.effect.body.first();
	}
	else {
		return "None";
	}
}
operation UMLRTModel!State stateType() : String {
	if (self.type.name = "State") {
		if (self.getRegions().size() > 0) {
			return "Composite";
		}
		else {
			return "State";
		}
	}
}
operation UMLRTModel!Pseudostate stateType() : String {
	return "Pseudo";
}
operation UMLRTModel!Transition transType() : String {
	var sourceType = self.source.stateType();
	var targetType = self.target.stateType();
	return sourceType.characterAt(0).concat("to").concat(targetType.characterAt(0));
}
operation UMLRTModel!Class getPrimitiveAttributes() : Set {
	var attr : Set;
	for (a in self.ownedAttribute) {
		if (a.type.isDefined()) {
			switch (a.type.name) {
				case "Real": {
					if (a.upper = 1) {
						attr.add(a);
					}
				}
				case "Integer": {
					if (a.upper = 1) {
						attr.add(a);
					}
				}
				case "Boolean": {
					if (a.upper = 1) {
						attr.add(a);
					}
				}
				case "String": {
					if (a.upper = 1) {
						attr.add(a);
					}
				}
			}
		}
	}
	return attr;
}
operation UMLRTModel!Class getSubclassAttributes() : Set {
	var attr : Set;
	for (a in self.ownedAttribute) {
		if (a.type.isDefined()) {
			if (allClasses.selectOne(c|c.name = a.type.name).isDefined()) {
				attr.add(a);
			}
		}
	}
	return attr;
}
operation UMLRTModel!Class getTimerAttributes() : Set {
	var attr : Set;
	for (a in self.ownedAttribute) {
		if (a.type.isDefined() and a.type.name = "Timing") {
			attr.add(a);
		}
	}
	return attr;
}
operation UMLRTModel!StateMachine getMainRegion() : UMLRTModel!Region {
	for (r in self.region) {
		for (s in r.subvertex) {
			if (s.type.name = "Pseudostate" and not (r.transition.exists(t|t.target = s)) and (r.transition.exists(t|t.source = s)) and s.kind <> "choice" and s.kind <> "entryPoint" and s.kind <> "exitPoint") {
				return r;
			}
		}
	}
	self.err("The state doesn't have the region that includes the intial state");
}
operation UMLRTModel!State getMainRegion() : UMLRTModel!Region {
	for (r in self.region) {
		return r;
	}
	self.err("The state doesn't have the region that includes the intial state");
}
operation UMLRTModel!StateMachine getIntialState() : UMLRTModel!Pseudostate {
	for (r in self.region) {
		for (s in r.subvertex) {
			if (s.type.name = "Pseudostate" and s.kind = UMLRTModel!PseudostateKind#initial and r.transition.exists(t|t.source = s)) {
				return s;
			}
		}
	}
	self.err("No Intail state for state machine= ");
}
operation UMLRTModel!StateMachine getIntialTransition() : UMLRTModel!Transition {
	for (r in self.region) {
		for (t in r.transition) {
			if (t.source = self.getIntialState()) {
				return t;
			}
		}
	}
	self.err("No Intail Transition ----");
}
operation UMLRTModel!Transition printAllTrigger() : Set {
	for (t in self.trigger) {
		t.println();
		t.port.name.println();
		for (ev in t.event) {
			ev.println();
		}
	}
	for (ef in self.effect) {
		ef.println();
	}
}
operation Any getActivePorts() : Set {
	var ports : Set;
	for (trans in self) {
		for (trig in trans.trigger) {
			for (p in trig.port) {
				if (p.type.name <> "Timing") {
					ports.add(p);
				}
			}
		}
	}
	return ports;
}
operation Any getAllTransitions() : Set {
	var allTransitions : Set;
	for (r in self) {
		if (r.subvertex.isDefined()) {
			allTransitions.addAll(r.transition);
		}
	}
	return allTransitions;
}
operation Any getAllStates() : Set {
	var allStates : Set;
	for (r in self) {
		if (r.subvertex.isDefined()) {
			allStates.addAll(r.subvertex);
		}
	}
	return allStates;
}
operation Any getAllRegions() : Set {
	var allRegions : Set;
	for (sm in self) {
		allRegions.addAll(sm.getRegions());
	}
	return allRegions;
}
operation Any getRegions() : Set {
	var allRegion : Set;
	allRegion.addAll(self.region);
	var tempAllRegion : Set;
	for (r in allRegion) {
		for (s in r.subvertex) {
			if (s.type.name = "State") {
				var tempRegion : Set = s.getRegions();
				if (tempRegion.isDefined()) {
					tempAllRegion.addAll(tempRegion);
				}
			}
		}
	}
	if (tempAllRegion.isDefined()) {
		allRegion.addAll(tempAllRegion);
	}
	return allRegion;
}
operation UMLRTModel!Package getAllStateMachines() : Set {
	var tempAllStateMachine : Set;
	var childs : Set = self.getAllOwnedClasses();
	for (c in childs) {
		var tempStateMachine : UMLRTModel!StateMachine = c.getStateMachine();
		if (tempStateMachine.isDefined()) {
			tempAllStateMachine.add(tempStateMachine);
		}
	}
	return tempAllStateMachine;
}
operation UMLRTModel!Class getStateMachine() : UMLRTModel!StateMachine {
	for (b in self.ownedBehavior) {
		if (b.type.name = "StateMachine") {
			return b;
		}
	}
}
operation UMLRTModel!Package getAllOwnedClasses() : Set {
	var childs : Set = self.packagedElement.select(e|e.type.name = "Class");
	for (p in self.getAllNestedPackage()) {
		childs.addAll(p.getAllOwnedClasses());
	}
	return childs;
}
operation UMLRTModel!Package getAllNestedPackage() : Set {
	var firstNestedPackage : Set = self.packagedElement.select(e|e.type.name = "Package");
	var allNestedPackage : Set;
	for (p in firstNestedPackage) {
		var tempResult : Set = p.getAllNestedPackage();
		if (tempResult.isDefined()) {
			allNestedPackage.addAll(tempResult);
		}
	}
	allNestedPackage.addAll(firstNestedPackage);
	return allNestedPackage;
}
operation UMLRTModel!Package getAtrificats(name : String) : UMLRTModel!Artifact {
	return self.packagedElement.select(e|e.type.name = "Artifact" and e.name = name).first;
}
operation UMLRTModel!Package getTopCapsule() : String {
	var e = modelroot.eAnnotations.select(e|e.source = "UMLRT_Default_top");
	if (e.isDefined() and e.size() > 0) {
		return e.details.first().value.first();
	}
	else {
		return "";
	}
}
operation UMLRTModel!Transition transData() : Set {
	var tempTransData : Set;
	if (self.source.stateType() == "Pseudo") {
		var tempTranData : Sequence;
		tempTranData.add(self.source.name);
		tempTranData.add(self.name);
		tempTranData.add(self.target.name);
		tempTranData.add("");
		tempTranData.add("");
		tempTransData.add(tempTranData);
	}
	else if (self.trigger.isDefined()) {
		for (t in self.trigger) {
			for (p in t.port) {
				var tempTranData : Sequence;
				tempTranData.add(self.source.name);
				tempTranData.add(self.name);
				tempTranData.add(self.target.name);
				if (t.event.name == "*") {
					tempTranData.add("*");
				}
				else {
					tempTranData.add(t.event.`operation`.name);
				}
				tempTranData.add(p.type.name);
				tempTransData.add(tempTranData);
			}
		}
	}
	return tempTransData;
}